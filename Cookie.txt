概述
cookie是服务器用来保存浏览器一小段的文本信息, 大小一般不超过4KB. 浏览器每次向服务器发送请求,就会自动附上这段信息.
cookie通常包含一下信息:
Cookie 的名字
Cookie 的值（真正的数据写在这里面）
到期时间
所属域名（默认是当前域名）
生效的路径（默认是当前网址）

我们可以使用docuemnt.cookie属性返回当前网页的cookie.

还可以使用window.navigator.cookieEnabled属性设置浏览器能否打开cookie功能. 为true时浏览器打开, false为不打开

浏览器遵从同源策略, 只要两个网址的域名和端口相同, 就可以共享cookie. (不要求协议相同)

cookie和HTTP协议
HTTP 回应：Cookie 的生成
服务器若想让浏览器保存cookie信息, 则会在响应报文中添加Set-Cookie字段
例如:
HTTP/1.0 200 OK
Content-type: text/html
Set-Cookie: yummy_cookie=choco
Set-Cookie: tasty_cookie=strawberry

响应中可以有多个Set-Cookie字段, 表示多个Cookie. 还可以在该字段中加入Cookie的属性

HTTP 请求：Cookie 的发送
浏览器发送请求时, 会在请求报文中加入Cookie字段. 它的值可以有多个表示多个Cookie, 用分号分割

服务器收到浏览器发送的Cookie无法知道下面两点:
Cookie的属性 
设置Cookie的域名

Cookie的属性
expires指定Cookie的到期时间. 若不设置或设置为null则表示Cookie只在当前回话有效
max-Age指定Cookie从当前时间(即现在)开始Cookie存在的秒数.
max-Age的优先级高于Expires
domain属性指定浏览器发送请求时, 哪些域名要附带这个Cookie
path属性指定浏览器发出请求时哪些路径要附带这个Cookie
secure属性指定浏览器只有在加密协议 HTTPS 下，才能将这个 Cookie 发送到服务器。另一方面，如果当前协议是 HTTP，浏览器会自动忽略服务器发来的Secure属性
HttpOnly属性指定该 Cookie 无法通过 JavaScript 脚本拿到

document.cookie
document.cookie用于读取和设置当前网页的Cookie
document.cookie读取的cookie是多个cookie. 因此想要取得每个cookie就要额外进行操作
当写入cookie时, document.cookie一次只能写入一个cookie. 且等于号两边不能有空格. 若想添加多个cookie只需再次使用docment.cookie即可.
document.cookie = 'test1=hello';
document.cookie = 'test2=world';
document.cookie
// test1=hello;test2=world
document.cookie = "foo=bar; expires=Fri, 31 Dec 2020 23:59:59 GMT";
我们还可以写入cookie的属性, 但是有以下几点需要注意:
path属性必须为绝对路径，默认为当前路径。
domain属性值必须是当前发送 Cookie 的域名的一部分。比如，当前域名是example.com，就不能将其设为foo.com。该属性默认为当前的一级域名（不含二级域名）。
max-age属性的值为秒数。
expires属性的值为 UTC 格式，可以使用Date.prototype.toUTCString()进行日期格式转换
删除cookie的方法只能是设置它的expires属性.

