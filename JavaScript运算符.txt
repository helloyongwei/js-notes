加法运算符
两操作数想加时, 若有一个是字符串, 则另一操作数转成字符串再连接在一起
减, 除, 乘法都将字符串自动转为数值再运算
对象相加想调用valueOf()方法,在调用toString()方法, 再运算
若操作数中有一个是Date对象的实例, 那么会优先执行toString()方法

算术运算符
+, -, *, /, **, %, ++, --, 正+, 负-
余数运算符%的运算结果正负号由第一个操作数决定
余数运算可以用于浮点数的计算, 但不准确
++,--为一元运算符
正+, 负-运算符也是一元运算符, 它们可以将任何值转为数值, +的作用和Number()函数相同, -转为+的相反数

赋值运算符=

比较运算符
>, <, >=, <=, ==, ===
字符串之间的比较, JavaScript将依次比较单个字符的Unicode码点, 谁的先大则谁就大
对于除字符串之间的原始类型的值, 除==和===外, 其余运算符将操作数先转为数值再比较
NaN与任何值(包括NaN)比较都返回false, 因为NaN和任何值(包括NaN)都不想等
对于对象, 则会转为原始类型再比较(先调用valueOf, 若返回对象再调用toString)
==将两个操作数转为同一类型再比较, ===不对操作数转换. ==中两值相等的条件是可以转换为同值, ===中两值相等的条件是同类型同值
对于复合类型的值,比较它们是否指向同一内存地址
两个对象的比较, ===比较的是地址, >,<比较的是值
undefined===null返回true
!==先求===的运算结果, 再取反
==中原始类型的值会转换为数值再比较
==中复合类型和原始类型的值比较, 复合类型会转为原始类型再比较
==中undefined和null不与除这两个值之外的任何值相等
!=与==的运算结果相反

布尔运算符
!, &&, ||, ?:
!对undefined, null, false, 0, NaN, ""(空字符串)返回true, 其他返回false
!! 等同于Boolean()函数
&&, ||是短路运算符
&&(逻辑与) 在全为true的情况下返回true, 只要有false就返回false
||(逻辑或) 在全为false的情况下返回false, 只要有true就返回true

位运算符
|, &, ~, ^, <<, >>, >>>
位运算符用来处理两个比特位(1,0)
|(按位或), 全0为0, 有1为1
&(按位与), 全1为1, 有0为0
~(取反, 否), 1取0, 0取1, 因为是二进制位则可以简记为: 数的相反数减1
^(异或), 不同为1, 相同为0, 连续对两个变量进行三次^运算会交换两个变量的值(a^=b, b^=a, a^=b)
所有位运算符只对整数有效, 遇到小数时将小数部分直接舍去(不四舍五入), 只保留整数部分(则对某小数进行两次~运算得到整数)
对其他非数值进行~运算, JavaScript会先调用Number()函数在运算
<<(左移), 将二进制数向左移动指定位(符号位不移动), 尾部补0(左移相当于乘以2的幂次方)
>>(右移), 将二进制数向右移动指定位(符号位不移动), 头部补0(右移相当于除以2的幂次方)
>>>(带符号的右移), 将一个二进制数向右移动(包括符号位), 头部补0(正数相当于>>, 负数则不是)

运算符优先级

